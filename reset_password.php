<?php
/**
 * Handles the password reset process using a token.
 *
 * This script validates the token provided in the URL, displays a form
 * for entering a new password, and processes the password update.
 * It relies on services from bootstrap.php for token validation,
 * password updates, and user feedback.
 */
require_once 'login_system/src/bootstrap.php'; // Defines $authController, $user, $security, $auditLogger

$authController->requireGuest(); // User should not be logged in

// Initialize variables that might be set/used by the included handler
$token = $_GET['token'] ?? '';
$show_form = false; // Default: do not show form. handle_reset_password.php will set to true if token is valid.
$user_id_for_reset = null; // Will be set by handler if token is valid.

// Include the handler script. It will:
// 1. Validate $token.
// 2. If token is valid and method is GET, set $show_form = true and generate CSRF.
// 3. If token is valid and method is POST, process form submission (CSRF, password update), then redirect.
// 4. If token is invalid, set $show_form = false and set flash error message.
// It uses $token, and modifies $show_form and $user_id_for_reset.
// It also uses $user, $security, $authController, $auditLogger from bootstrap.
require_once 'login_system/includes/handle_reset_password.php';

// Note: $errors array is not directly used here anymore for display,
// as handle_reset_password.php uses flash messages for errors and redirects.
// Flash messages (errors and success) will be displayed by the HTML template.
// $show_form is the primary variable from the handler that controls page display.
// $token (from GET) is used in the form action if $show_form is true.
// $security (for CSRF input) and $authController (for buildUrl) are used by the template.

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password - <?php echo $security->escapeHTML(defined('SITE_NAME') ? SITE_NAME : 'Login System'); ?></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="login_system/css/style.css">
</head>
<body>
    <div class="container">
        <div class="auth-container">
            <h2 class="text-center mb-4">Reset Your Password</h2>

            <?php display_flash_messages('errors', 'danger'); ?>
            <?php 
                // Success messages are usually displayed on the sign-in page after successful reset and redirect.
                // However, if a success message was set without redirect (e.g. future use), it could be shown here.
                display_flash_messages('success', 'success'); 
            ?>

            <?php 
            // $show_form is determined by handle_reset_password.php.
            // If true, it means the token was valid and it's a GET request (CSRF token also generated by handler).
            // The condition `!$authController->getAndSetFlashMessage('success')` from original code
            // was to prevent showing form if a success message was set (e.g. after successful POST).
            // Since successful POSTs now redirect to signin, this specific check might be less critical here,
            // but keeping $show_form as the main condition is correct.
            if ($show_form): 
            ?>
            <form id="resetPasswordForm" method="POST" action="<?php echo $authController->buildUrl(PAGE_RESET_PASSWORD, 'token=' . $security->escapeHTML($token)); ?>" novalidate>
                <?php echo $security->getCsrfInput(); // CSRF token input field, generated by handler on GET ?>
                <input type="hidden" name="url_token" value="<?php echo $security->escapeHTML($token); // Include the token from URL in the form ?>">

                <div class="mb-3">
                    <label for="password" class="form-label">New Password</label>
                    <input type="password" class="form-control" id="password" name="password" required minlength="8">
                    <div class="invalid-feedback">Password must be at least 8 characters.</div>
                </div>
                <div class="mb-3">
                    <label for="confirm_password" class="form-label">Confirm New Password</label>
                    <input type="password" class="form-control" id="confirm_password" name="confirm_password" required>
                    <div class="invalid-feedback">Please confirm your new password.</div>
                </div>
                <button type="submit" class="btn btn-primary w-100">Reset Password</button>
            </form>
            <?php else: // If $show_form is false, it means token was invalid or missing. Flash error message should be displayed above. ?>
                 <p class="text-center">If your token is invalid or expired, you can <a href="<?php echo $authController->buildUrl(PAGE_FORGOT_PASSWORD); ?>">request a new reset link</a>.</p>
            <?php endif; // End $show_form check ?>
             <p class="text-center mt-3">
                <a href="<?php echo $authController->buildUrl(PAGE_SIGNIN); ?>">Back to Sign In</a>
            </p>
        </div>
    </div>

    <script>
        // Standard Bootstrap validation + password match
        (function() {
            'use strict';
            window.addEventListener('load', function() {
                var form = document.getElementById('resetPasswordForm');
                if (!form) return;

                form.addEventListener('submit', function(event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');

                    var password = document.getElementById('password');
                    var confirmPassword = document.getElementById('confirm_password');
                    if (password.value !== confirmPassword.value) {
                        confirmPassword.setCustomValidity("Passwords do not match.");
                        var feedback = confirmPassword.parentElement.querySelector('.invalid-feedback');
                        if(feedback) feedback.textContent = "Passwords do not match.";
                        event.preventDefault();
                        event.stopPropagation();
                    } else {
                        confirmPassword.setCustomValidity("");
                    }
                }, false);
                
                var passwordInput = document.getElementById('password');
                var confirmPasswordInput = document.getElementById('confirm_password');
                if(passwordInput && confirmPasswordInput) {
                    function validatePasswordMatch() {
                        if (passwordInput.value !== confirmPasswordInput.value) {
                            confirmPasswordInput.setCustomValidity("Passwords do not match.");
                        } else {
                            confirmPasswordInput.setCustomValidity("");
                        }
                    }
                    confirmPasswordInput.addEventListener('input', validatePasswordMatch);
                    passwordInput.addEventListener('input', function() {
                        validatePasswordMatch();
                        if(confirmPasswordInput.value !== ""){
                             confirmPasswordInput.reportValidity();
                        }
                    });
                }
            }, false);
        })();
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
